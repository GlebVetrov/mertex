{"version":3,"sources":["components/styled-radio/styled-radio.js","components/ip-address/ip-address.js","components/dns/dns.js","components/ethernet/ethernet.js","components/wireless/wireless.js","components/app/App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","icon","borderRadius","width","height","boxShadow","backgroundColor","backgroundImage","outline","outlineOffset","background","checkedIcon","display","content","StyledRadio","props","classes","Radio","className","root","disableRipple","color","IpAddress","state","data","errors","ipAddress","empty","valid","mask","ipRef","React","createRef","maskRef","gatewayRef","handleValidation","bind","handleChange","handleRadioGroup","isValid","setError","returnState","clearFields","name","event","this","manual","value","target","setState","test","trim","error","gateway","key","automatically","is","cbChangeState","disabled","RadioGroup","onChange","aria-label","FormControlLabel","control","label","Input","ref","onBlur","PureComponent","Dns","prefDns","alterDns","Ethernet","changeState","ip","dns","Wireless","handleCheckboxChange","handleInputChange","checked","wifi","security","Checkbox","App","saveData","console","log","JSON","stringify","ethernet","wireless","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.17c0f203.chunk.js","sourcesContent":["import {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Radio} from \"@material-ui/core\";\r\nimport React from \"react\";\r\n\r\nconst useStyles = makeStyles({\r\n    icon: {\r\n        borderRadius: '50%',\r\n        width: 16,\r\n        height: 16,\r\n        boxShadow: 'inset 0 0 0 1px rgba(16,22,26,.2), inset 0 -1px 0 rgba(16,22,26,.1)',\r\n        backgroundColor: '#f5f8fa',\r\n        backgroundImage: 'linear-gradient(180deg,hsla(0,0%,100%,.8),hsla(0,0%,100%,0))',\r\n        '$root.Mui-focusVisible &': {\r\n            outline: '2px auto rgba(19,124,189,.6)',\r\n            outlineOffset: 2,\r\n        },\r\n        'input:hover ~ &': {\r\n            backgroundColor: '#ebf1f5',\r\n        },\r\n        'input:disabled ~ &': {\r\n            boxShadow: 'none',\r\n            background: 'rgba(206,217,224,.5)',\r\n        },\r\n    },\r\n    checkedIcon: {\r\n        backgroundColor: '#137cbd',\r\n        backgroundImage: 'linear-gradient(180deg,hsla(0,0%,100%,.1),hsla(0,0%,100%,0))',\r\n        '&:before': {\r\n            display: 'block',\r\n            width: 16,\r\n            height: 16,\r\n            backgroundImage: 'radial-gradient(#fff,#fff 28%,transparent 32%)',\r\n            content: '\"\"',\r\n        },\r\n        'input:hover ~ &': {\r\n            backgroundColor: '#106ba3',\r\n        },\r\n    },\r\n});\r\n\r\nexport default function StyledRadio(props) {\r\n    const classes = useStyles();\r\n    return (\r\n        <Radio\r\n            className={classes.root}\r\n            disableRipple\r\n            color=\"default\"\r\n            checkedIcon={<span className={`${classes.icon} ${classes.checkedIcon}`} />}\r\n            icon={<span className={classes.icon} />}\r\n            {...props}\r\n        />\r\n    );\r\n}\r\n","import React, {PureComponent} from \"react\";\r\nimport './ip-address.scss';\r\nimport {FormControlLabel, Input, RadioGroup} from \"@material-ui/core\";\r\nimport StyledRadio from \"../styled-radio/styled-radio\";\r\n\r\nexport default class IpAddress extends PureComponent{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.ipRef = React.createRef();\r\n        this.maskRef = React.createRef();\r\n        this.gatewayRef = React.createRef();\r\n\r\n        this.handleValidation = this.handleValidation.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleRadioGroup = this.handleRadioGroup.bind(this);\r\n        this.isValid = this.isValid.bind(this);\r\n        this.setError = this.setError.bind(this);\r\n        this.returnState = this.returnState.bind(this);\r\n        this.clearFields = this.clearFields.bind(this);\r\n    }\r\n\r\n    state = {\r\n        data: {...this.props.data},\r\n        errors: {\r\n            ipAddress: {\r\n                empty: false,\r\n                valid: false\r\n            },\r\n            mask: {\r\n                empty: false,\r\n                valid: false\r\n            }\r\n        }\r\n    };\r\n\r\n    handleChange(name, event) {\r\n        const {data, errors} = this.state;\r\n        if (name in data.manual) {\r\n            const {value} = event.target;\r\n            data.manual[name] = value;\r\n            this.setState({data: {...data}}, this.returnState);\r\n        }\r\n        if (name in errors) {\r\n            if (errors[name].empty === true || errors[name].valid === true) {\r\n                errors[name].empty = false;\r\n                errors[name].valid = false;\r\n                this.setState({errors: {...errors}}, this.returnState);\r\n            }\r\n        }\r\n    }\r\n\r\n    isValid(value) {\r\n        const validRegExp = /^\\d{1,3}.\\d{1,3}.\\d{1,3}.\\d{1,3}$/;\r\n        return validRegExp.test(value.trim());\r\n    }\r\n\r\n    setError(name, value) {\r\n        const errors = {...this.state.errors};\r\n        errors[name].empty = false;\r\n        errors[name].valid = false;\r\n        if (value === '') {\r\n            errors[name].empty = true;\r\n        }\r\n        if (!this.isValid(value) && value !== '') {\r\n            errors[name].valid = true;\r\n        }\r\n        this.setState({error: {...errors}});\r\n    }\r\n\r\n    handleValidation(name, event) {\r\n        const {manual} = this.state.data;\r\n        const {value} = event.target;\r\n        if (name in manual) {\r\n            this.setError(name, value);\r\n        }\r\n    }\r\n\r\n    clearFields() {\r\n        const {data} = this.state;\r\n        const {errors} = this.state;\r\n        data.manual.ipAddress = data.manual.mask = data.manual.gateway = '';\r\n        for (let value in errors) {\r\n            for (let key in errors[value]) {\r\n                errors[value][key] = false;\r\n            }\r\n        }\r\n        this.setState({data: {...data}, errors: {...errors}}, this.returnState);\r\n    }\r\n\r\n    handleRadioGroup(event) {\r\n        const {data} = this.state;\r\n        const {value} = event.target;\r\n        data.automatically = value === 'automatically';\r\n        data.manual.is = !data.automatically;\r\n        this.setState({data: {...data}}, this.clearFields);\r\n    }\r\n\r\n    returnState() {\r\n        const {automatically} = this.state.data;\r\n        const {cbChangeState} = this.props;\r\n        if (automatically) {\r\n            cbChangeState('ip', {...this.state.data});\r\n            return;\r\n        }\r\n        const {errors} = this.state;\r\n        for (let value in errors) {\r\n            for (let key in errors[value]) {\r\n                if (errors[value][key] === true) {\r\n                    const {data} = this.state;\r\n                    data.manual.errors = true;\r\n                    this.setState({data: {...data}}, cbChangeState('ip', {...this.state.data}));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {data, errors} = this.state;\r\n        const {disabled} = this.props;\r\n        return (\r\n            <div className={`ip-address`}>\r\n                <RadioGroup onChange={this.handleRadioGroup} value={data.automatically === true ? 'automatically' : 'manual'} aria-label=\"ip\" name=\"ip-radios\">\r\n                    <FormControlLabel value=\"automatically\" control={<StyledRadio />} label=\"Obtain in IP address automatically (DHCP/BootP)\"  disabled={disabled}/>\r\n                    <FormControlLabel value=\"manual\" control={<StyledRadio />} label=\"Use the following IP address\"  disabled={disabled}/>\r\n                </RadioGroup>\r\n                <div className={`ip-address__manual ${data.automatically === true && 'transparent'}`}>\r\n                    <label>\r\n                        { errors.ipAddress.empty && <span className={`error`}>Field is empty</span>}\r\n                        { errors.ipAddress.valid && <span className={`error`}>Wrong value</span>}\r\n                        <span  className={`ip-address__manual-desc required`}>IP address: </span>\r\n                        <Input\r\n                            ref={this.ipRef}\r\n                            onChange={this.handleChange.bind(this, 'ipAddress')}\r\n                            onBlur={this.handleValidation.bind(this, 'ipAddress')}\r\n                            disabled={data.automatically}\r\n                            value={data.manual.ipAddress}>\r\n                        </Input>\r\n\r\n                    </label>\r\n                    <label>\r\n                        { errors.mask.empty && <span className={`error`}>Field is empty</span>}\r\n                        { errors.mask.valid && <span className={`error`}>Wrong value</span>}\r\n                        <span className={`ip-address__manual-desc required`}>Subnet Mask: </span>\r\n                        <Input\r\n                            ref={this.maskRef}\r\n                            onChange={this.handleChange.bind(this, 'mask')}\r\n                            onBlur={this.handleValidation.bind(this, 'mask')}\r\n                            disabled={data.automatically}\r\n                            value={data.manual.mask}>\r\n                        </Input>\r\n                    </label>\r\n                    <label>\r\n                        <span className={`ip-address__manual-desc`}>Default Gateway: </span>\r\n                        <Input\r\n                            ref={this.gatewayRef}\r\n                            onChange={this.handleChange.bind(this, 'gateway')}\r\n                            disabled={data.automatically}\r\n                            value={data.manual.gateway}>\r\n                        </Input>\r\n                    </label>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, {PureComponent} from \"react\";\r\nimport './dns.scss';\r\nimport {FormControlLabel, Input, RadioGroup} from \"@material-ui/core\";\r\nimport StyledRadio from \"../styled-radio/styled-radio\";\r\n\r\nexport default class Dns extends PureComponent{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleValidation = this.handleValidation.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleRadioGroup = this.handleRadioGroup.bind(this);\r\n        this.isValid = this.isValid.bind(this);\r\n        this.setError = this.setError.bind(this);\r\n        this.returnState = this.returnState.bind(this);\r\n        this.clearFields = this.clearFields.bind(this);\r\n    }\r\n\r\n    state = {\r\n        data: {...this.props.data},\r\n        errors: {\r\n            prefDns: {\r\n                empty: false,\r\n                valid: false\r\n            }\r\n        }\r\n    };\r\n\r\n    handleChange(name, event) {\r\n        const {data, errors} = this.state;\r\n        if (name in data.manual) {\r\n            const {value} = event.target;\r\n            data.manual[name] = value;\r\n            this.setState({data: {...data}}, this.returnState);\r\n        }\r\n        if (name in errors) {\r\n            if (errors[name].empty === true || errors[name].valid === true) {\r\n                errors[name].empty = false;\r\n                errors[name].valid = false;\r\n                this.setState({errors: {...errors}}, this.returnState);\r\n            }\r\n        }\r\n    }\r\n\r\n    isValid(value) {\r\n        const validRegExp = /^\\d{1,3}.\\d{1,3}.\\d{1,3}.\\d{1,3}$/;\r\n        return validRegExp.test(value.trim());\r\n    }\r\n\r\n    setError(name, value) {\r\n        const errors = {...this.state.errors};\r\n        errors[name].empty = false;\r\n        errors[name].valid = false;\r\n        if (value === '') {\r\n            errors[name].empty = true;\r\n        }\r\n        if (!this.isValid(value) && value !== '') {\r\n            errors[name].valid = true;\r\n        }\r\n        this.setState({error: {...errors}});\r\n    }\r\n\r\n    handleValidation(name, event) {\r\n        const {manual} = this.state.data;\r\n        const {value} = event.target;\r\n        if (name in manual) {\r\n            this.setError(name, value);\r\n        }\r\n    }\r\n\r\n    clearFields() {\r\n        const {data} = this.state;\r\n        const {errors} = this.state;\r\n        data.manual.ipAddress = data.manual.mask = data.manual.gateway = '';\r\n        for (let value in errors) {\r\n            for (let key in errors[value]) {\r\n                errors[value][key] = false;\r\n            }\r\n        }\r\n        this.setState({data: {...data}, errors: {...errors}}, this.returnState);\r\n    }\r\n\r\n    handleRadioGroup(event) {\r\n        const {data} = this.state;\r\n        const {value} = event.target;\r\n        data.automatically = value === 'automatically';\r\n        data.manual.is = !data.automatically;\r\n        this.setState({data: {...data}}, this.clearFields);\r\n    }\r\n\r\n    returnState() {\r\n        const {automatically} = this.state.data;\r\n        const {cbChangeState} = this.props;\r\n        if (automatically) {\r\n            cbChangeState('dns', {...this.state.data});\r\n            return;\r\n        }\r\n        const {errors} = this.state;\r\n        for (let value in errors) {\r\n            for (let key in errors[value]) {\r\n                if (errors[value][key] === true) {\r\n                    const {data} = this.state;\r\n                    data.manual.errors = true;\r\n                    this.setState({data: {...data}}, cbChangeState('dns', {...this.state.data}));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {data, errors} = this.state;\r\n        const {disabled} = this.props;\r\n        return (\r\n            <div className={`dns`}>\r\n                <RadioGroup onChange={this.handleRadioGroup} value={data.automatically === true ? 'automatically' : 'manual'} aria-label=\"dns\" name=\"dns-radios\">\r\n                    <FormControlLabel value=\"automatically\" control={<StyledRadio />} label=\"Obtain DNS server address automatically\" disabled={disabled}/>\r\n                    <FormControlLabel value=\"manual\" control={<StyledRadio />} label=\"Use the following DNS server address\" disabled={disabled}/>\r\n                </RadioGroup>\r\n                <div className={`dns__manual ${data.automatically === true && 'transparent'}`}>\r\n                    <label>\r\n                        { errors.prefDns.empty && <span className={`error`}>Field is empty</span>}\r\n                        { errors.prefDns.valid && <span className={`error`}>Wrong value</span>}\r\n                        <span  className={`dns__manual-desc required`}>Preferred DNS server: </span>\r\n                        <Input\r\n                            onChange={this.handleChange.bind(this, 'prefDns')}\r\n                            onBlur={this.handleValidation.bind(this, 'prefDns')}\r\n                            disabled={data.automatically}\r\n                            value={data.manual.prefDns}>\r\n                        </Input>\r\n\r\n                    </label>\r\n                    <label>\r\n                        <span className={`dns__manual-desc`}>Alternative DNS server: </span>\r\n                        <Input\r\n                            onChange={this.handleChange.bind(this, 'alterDns')}\r\n                            disabled={data.automatically}\r\n                            value={data.manual.alterDns}>\r\n                        </Input>\r\n                    </label>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, {PureComponent} from \"react\";\r\nimport './ethernet.scss';\r\nimport IpAddress from '../ip-address/ip-address';\r\nimport Dns from '../dns/dns';\r\n\r\nexport default class Ethernet extends PureComponent{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.changeState = this.changeState.bind(this);\r\n        this.returnState = this.returnState.bind(this);\r\n    }\r\n\r\n    state = {...this.props.data};\r\n\r\n    changeState(name, data) {\r\n        this.setState({[name]: {...data}}, this.returnState);\r\n    }\r\n\r\n    returnState() {\r\n        const {cbChangeState} = this.props;\r\n        cbChangeState('ethernet', {...this.state});\r\n    }\r\n\r\n    render() {\r\n        const {ip, dns} = this.state;\r\n        return (\r\n               <div  className={`ethernet`}>\r\n                   <h3>Ethernet settings</h3>\r\n                   <IpAddress\r\n                       cbChangeState={this.changeState}\r\n                       data={ip}>\r\n                   </IpAddress>\r\n                   <Dns\r\n                       cbChangeState={this.changeState}\r\n                       data={dns}>\r\n                   ></Dns>\r\n               </div>\r\n        );\r\n    }\r\n}\r\n","import React, {PureComponent} from \"react\";\r\nimport  './wireless.scss';\r\nimport {Checkbox, Input} from \"@material-ui/core\";\r\nimport IpAddress from \"../ip-address/ip-address\";\r\nimport Dns from \"../dns/dns\";\r\n\r\nexport default class Wireless  extends PureComponent{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleCheckboxChange = this.handleCheckboxChange.bind(this);\r\n        this.changeState = this.changeState.bind(this);\r\n        this.returnState = this.returnState.bind(this);\r\n        this.handleValidation = this.handleValidation.bind(this);\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n    }\r\n\r\n    state = {\r\n        ...this.props.data,\r\n        errors: {\r\n            name: {\r\n                empty: false\r\n            },\r\n            key: {\r\n                empty: false\r\n            }\r\n        }\r\n    };\r\n\r\n    handleCheckboxChange(name, event) {\r\n        const {checked} = event.target;\r\n        const {state} = this;\r\n        state[name].is = checked;\r\n        this.setState({[name]: {...state[name]}}, this.returnState);\r\n    }\r\n\r\n    handleInputChange(name, event) {\r\n        const {value} = event.target;\r\n        const {wifi, security, errors} = this.state;\r\n        if (name === 'name') {\r\n            wifi.name = value;\r\n            this.setState({wifi: {...wifi}}, this.returnState);\r\n        }\r\n        if (name === 'key') {\r\n            security.name = value;\r\n            this.setState({security: {...security}}, this.returnState);\r\n        }\r\n\r\n        if (name in errors) {\r\n            if (errors[name].empty === true || errors[name].valid === true) {\r\n                errors[name].empty = false;\r\n                errors[name].valid = false;\r\n                this.setState({errors: {...errors}}, this.returnState);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    handleValidation(name, event) {\r\n        const {errors} = this.state;\r\n        const {value} = event.target;\r\n        if (name in errors) {\r\n            if (value === '' && errors[name].empty === false) {\r\n                errors[name].empty = true;\r\n            }\r\n        }\r\n        this.setState({error: {...errors}});\r\n    }\r\n\r\n    changeState(name, data) {\r\n        this.setState({[name]: {...data}}, this.returnState);\r\n    }\r\n\r\n    returnState() {\r\n        const {cbChangeState} = this.props;\r\n        cbChangeState('wireless', {...this.state});\r\n    }\r\n\r\n    render() {\r\n        const {wifi, security, ip, dns} = this.state;\r\n        return (\r\n            <div className={`wireless`}>\r\n                <h3 className={`wireless__title`}>Wireless settings</h3>\r\n                <label>\r\n                    <Checkbox onChange={this.handleCheckboxChange.bind(this, 'wifi')} color=\"primary\" checked={wifi.is}></Checkbox>\r\n                    <span className={`wireless__desc`}>Enable wifi</span>\r\n                </label>\r\n                <div className={`wireless__container ${!wifi.is && 'transparent'}`}>\r\n                    <label className={`wireless__wrap`}>\r\n                        { this.state.errors.name.empty && <span className={`error`}>Field is empty</span>}\r\n                        <span className={`wireless__desc required`}>Wireless Network Name: </span>\r\n                        <Input\r\n                            onChange={this.handleInputChange.bind(this, 'name')}\r\n                            onBlur={this.handleValidation.bind(this, 'name')}\r\n                            disabled={!wifi.is}\r\n                        ></Input>\r\n                    </label>\r\n                    <label>\r\n                        <Checkbox onChange={this.handleCheckboxChange.bind(this, 'security')} color=\"primary\" checked={security.is} disabled={!wifi.is}></Checkbox>\r\n                        <span className={`wireless__desc`}>Enable Wireless Security</span>\r\n                    </label>\r\n                    <label className={`wireless__wrap ${!security.is && 'transparent'}`}>\r\n                        { this.state.errors.key.empty && <span className={`error`}>Field is empty</span>}\r\n                        <span className={`wireless__desc required`}>Security key: </span>\r\n                        <Input\r\n                            onChange={this.handleInputChange.bind(this, 'key')}\r\n                            onBlur={this.handleValidation.bind(this, 'key')}\r\n                            disabled={!security.is}\r\n                        ></Input>\r\n                    </label>\r\n                    <IpAddress\r\n                        disabled={!wifi.is}\r\n                        cbChangeState={this.changeState}\r\n                        data={ip}>\r\n                    </IpAddress>\r\n                    <Dns\r\n                        disabled={!wifi.is}\r\n                        cbChangeState={this.changeState}\r\n                        data={dns}>\r\n                        ></Dns>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, {PureComponent} from 'react';\nimport './App.scss';\nimport Ethernet from '../ethernet/ethernet';\nimport Wireless from '../wireless/wireless';\nimport data from './data';\n\nexport default class App extends PureComponent{\n\n  constructor() {\n    super()\n\n    this.changeState = this.changeState.bind(this);\n    this.saveData = this.saveData.bind(this);\n  }\n\n  state = {...data};\n\n  changeState(name, data) {\n    this.setState({[name]: {...data}});\n  }\n\n  saveData() {\n    console.log(JSON.stringify(this.state));\n  }\n\n  render() {\n    return (\n        <div className={`settings`}>\n          <div className={`settings__ethernet-wireless`}>\n            <Ethernet cbChangeState={this.changeState} data={this.state.ethernet}>\n            </Ethernet>\n            <Wireless cbChangeState={this.changeState} data={this.state.wireless}>\n            </Wireless>\n          </div>\n          <div className={`settings__controls`}>\n            <button onClick={this.saveData} className={`settings__controls-btn`}>Save</button>\n            <button className={`settings__controls-btn`}>Cancel</button>\n          </div>\n        </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}